<?php


function mapping_menu() {

	$items['mappings'] = array(
		'title' => 'mapping',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('mapping_basic'),
		'access callback' => TRUE,
	);
	
	return $items;
}

function mapping_basic($form, &$form_state) {
	
	$datamodel_list= mapping_basic_populate_list();
	$dropdown_array= mapping_basic_relations_list();
		  
	$form = array();
	
	$form['datamodellist1'] = array (
					'#title' => t('Choose a datamodel to map to or insert a new one'),
					'#type' => 'select',
					'#options' => $datamodel_list,
					'#default_value' => 'default',			
				);
	
	$form['datamodellist2'] = array (
					'#title' => t('Choose a datamodel to map or insert a new one'),
					'#type' => 'select',
					'#options' => $datamodel_list,
					'#default_value' => 'default',
					
				);
	
	$form['wrapper_datamodels'] = array(
		 '#prefix' => '<div id="wrapper-datamodels">',
	 	 '#suffix' => '</div>',
	 	 );	
	
	$form['wrapper_datamodels']['datamodel_fieldset1'] = array(
		 '#type' => 'fieldset',
	 	 '#title' => t('datamodel 1'),
	 	 '#prefix' => '<div id="datamodel-fieldset1">',
	 	 '#suffix' => '</div>',
	 	 );	
	
	$form['wrapper_datamodels']['datamodel_fieldset2'] = array(
		 '#type' => 'fieldset',
	 	 '#title' => t('datamodel 2'),
	 	 '#prefix' => '<div id="datamodel-fieldset2">',
	 	 '#suffix' => '</div>',
	 	 );	  	 	 
		 
			$form['wrapper_datamodels']['datamodel_fieldset1']['datamodel1'] = array (
		  	  		'#title' => t('Name of the first datamodel'),
					'#type' => 'textfield',
					'#size' => '50',
					'#states' => array(
						'visible' => array(
						':input[name="datamodellist1"]' => array('value' => '0'),
							),
						),
					);
			 $form['wrapper_datamodels']['datamodel_fieldset1']['URI1'] = array (
		  	  		'#title' => t('URI'),
					'#type' => 'textfield',
					'#size' => '50',
					'#states' => array(
						'visible' => array(
						':input[name="datamodellist1"]' => array('value' => '0'),
							),
						),
					);
		  
			
			 $form['wrapper_datamodels']['datamodel_fieldset2']['datamodel2'] = array (
		  	  		'#title' => t('Name of the second datamodel'),                                     
					'#type' => 'textfield',
					'#size' => '50',
					'#states' => array(
						'visible' => array(
						':input[name="datamodellist2"]' => array('value' => '0'),
							),
						),
					);
			 
			   $form['wrapper_datamodels']['datamodel_fieldset2']['URI2'] = array (
							'#title' => t('URI'),
							'#type' => 'textfield',
							'#size' => '50',
							'#states' => array(
								'visible' => array(
								':input[name="datamodellist2"]' => array('value' => '0'),
									),
								),
							);
	   
	   $form['#attached']['css'] = array(
		  	  drupal_get_path('module', 'mapping') . '/mapping.css',
		);
	   
	   $form['#tree'] = TRUE;
	   $form['relations_fieldset'] = array(
	 	 '#type' => 'fieldset',
	 	 '#title' => t('mapping relations'),
	 	 '#prefix' => '<div id="relations-fieldset-wrapper">',
	 	 '#suffix' => '</div>',
	 	 );	
	 
		  $form['relations_fieldset']['labels']['core_class_label'] = array (
		  	  		'#markup' => '<h1>Core Class</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['core_property_label'] = array (
					'#markup' => '<h1>Core Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['relation_label'] = array (
					'#markup' => '<h1>Relation</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['mapped_class_label'] = array (
					'#markup' => '<h1>Mapped Class</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['mapped_property_label'] = array (
					'#markup' => '<h1>Mapped Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['mapped_property_label'] = array (
					'#markup' => '<h1>Mapped Property</h1>',
					);
		  
		  $form['relations_fieldset']['labels']['syntax_mapping_label'] = array (
					'#markup' => '<h1>Syntax Mapping</h1>',
					);
	
		  if (empty($form_state['num_relations'])) {
		  	  $form_state['num_relations'] =1;
		  }
		  
		  for ($i = 0; $i < $form_state['num_relations']; $i++) {

				$form['relations_fieldset'][$i]['core_class'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					);
				
				$form['relations_fieldset'][$i]['core_property'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					);
								
				$form['relations_fieldset'][$i]['relation'] = array (
					'#type' => 'select',
					'#options' => $dropdown_array,
					);
				
				$form['relations_fieldset'][$i]['mapped_class'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					
					);
				
				$form['relations_fieldset'][$i]['mapped_property'] = array (
					'#type' => 'textfield',
					'#size' => '10',
					);
				
				$form['relations_fieldset'][$i]['syntax_mapping'] = array (
					'#type' => 'checkbox',				
					);				
			}
			
			$form['add_relation'] = array(
				'#type' => 'submit',
				'#value' => t('add relation'),
				'#submit' => array('mapping_add_one'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'mapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
				  	  	
  	  	  	$form['add_5_relations'] = array(
  	  	  		'#type' => 'submit',
  	  	  		'#value' => ('+5 relations'),
  	  	  		'#submit' => array('mapping_add_five'),
  	  	  		'#limit_validation_errors' => array(),
  	  	  		'#ajax' => array(
					'callback' => 'mapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['remove_relation'] = array(
				'#type' => 'submit',
				'#value' => ('remove relation'),
				'#submit' => array('mapping_remove_one'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'mapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
			
			$form['remove_five_relations'] = array(
				'#type' => 'submit',
				'#value' => ('-5 relations'),
				'#submit' => array('mapping_remove_five'),
				'#limit_validation_errors' => array(),
				'#ajax' => array(
					'callback' => 'mapping_add_more_callback',
					'wrapper' => 'relations-fieldset-wrapper',
					),
				);
  	  	  	
		   $form['submit'] = array(
			 '#type' => 'submit',
			 '#value' => t('Submit'),			
			
			 );
		
	
	return $form;
	
}

function mapping_add_one($form, &$form_state) {
	$form_state['num_relations']++;
	$form_state['rebuild'] = TRUE;
	
}

function mapping_add_five($form,&$form_state) {
	$form_state['num_relations'] += 5;
	$form_state['rebuild'] = TRUE;
}

	
function mapping_remove_one($form, &$form_state) {
	if($form_state['num_relations'] > 1){
		$form_state['num_relations']--;
		$form_state['rebuild'] = TRUE;
	}
		 
}

function mapping_remove_five($form, &$form_state) {
	if($form_state['num_relations'] > 5){
		$form_state['num_relations']-=5;
		$form_state['rebuild'] = TRUE;
	}
}
	
function mapping_add_more_callback($form, $form_state) {

  return $form['relations_fieldset'];
}	

function mapping_basic_validate($form, &$form_state){
	$foo = FALSE;
 
  $option1 = $form_state['complete form']['datamodellist1']['#options'][$form_state['values']['datamodellist1']];
  $option2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
	
	if($option1== "add new"){
  	  if(empty(trim($form_state['values']['wrapper_datamodels']['datamodel_fieldset1']['datamodel1']))){
  	  	  form_set_error('postal', t('datamodel 1 name is required.'));
  	  	  
 	 	 $foo= TRUE;
 	  }
 	  
 	   if(empty(trim($form_state['values']['wrapper_datamodels']['datamodel_fieldset1']['URI1']))){
  	  	  form_set_error('postal', t('datamodel uri is required.'));
 	 	 $foo= TRUE;
 	  }
  }
  
  if($option2== "add new"){
  	  
  	  if(empty(trim($form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['datamodel2']))){
  	  	  form_set_error('postal', t('datamodel 2 name is required.'));
 	 	 $foo= TRUE;
 	  }
 	  
 	   if(empty(trim($form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['URI2']))){
  	  	  form_set_error('postal', t('datamodel uri is required.'));
 	 	 $foo= TRUE;
 	  }
  }

	for($i = 0; $i < $form_state['num_relations']; $i++){
 	 if(empty(trim($form_state['values']['relations_fieldset'][$i]['core_class']))) {
 	 	 form_set_error('postal', t('The Core class is required.'));
 	 	 $foo= TRUE;
 	}
 	
 	if(empty(trim($form_state['values']['relations_fieldset'][$i]['core_property']))) {
 	 	 form_set_error('postal', t('The Core property is required.'));
 	 	 $foo= TRUE;
 	}
 	
 	if(empty(trim($form_state['values']['relations_fieldset'][$i]['relation']))) {
 	 	 form_set_error('postal', t('The relation is required.'));
 	 	 $foo= TRUE;
 	}
 	
 	if(empty(trim($form_state['values']['relations_fieldset'][$i]['mapped_class']))) {
 	 	 form_set_error('postal', t('The mapped class is required.'));
 	 	 $foo= TRUE;
 	}
 	
 	if(empty(trim($form_state['values']['relations_fieldset'][$i]['mapped_property']))) {
 	 	 form_set_error('postal', t('The mapped property is required.'));
 	 	 $foo= TRUE;
 	
  }
  	}
    
  	 
  if($foo==TRUE){
  	 return;
  }
}

function mapping_basic_submit($form, &$form_state) {
	
	
	
	$select1 = $form_state['complete form']['datamodellist1']['#options'][$form_state['values']['datamodellist1']];
	$select2 = $form_state['complete form']['datamodellist2']['#options'][$form_state['values']['datamodellist2']];
	
	
	
	if($select1== "add new") {
		$datamodel1=$form_state['values']['wrapper_datamodels']['datamodel_fieldset1']['datamodel1'];
		$datamodelURI1= $form_state['values']['wrapper_datamodels']['datamodel_fieldset1']['URI1'];
	}
	else {
		$datamodel1=$select1;
		$result1= db_query('SELECT uri FROM datamodels WHERE name= :datamodel1', array(':datamodel1' => $datamodel1));
		
		$datamodelURI1= $result1->fetchField(0);
		
		
	}
		
	if($select2== "add new") {
		$datamodel2=$form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['datamodel2'];
		$datamodelURI2= $form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['URI2'];
	}
	else {
		$datamodel2=$select2;
		$result2 = db_query('SELECT uri FROM datamodels WHERE name= :datamodel2', array(':datamodel2' => $datamodel2));
		$datamodelURI2= $result2->fetchField(0);
		
	}
	
	
 for($i = 0; $i < $form_state['num_relations']; $i++){
 	 
 	$coreclass= $form_state['values']['relations_fieldset'][$i]['core_class'];
	$coreprop=$form_state['values']['relations_fieldset'][$i]['core_property'];
	$relation= $form_state['complete form']['relations_fieldset'][$i]['relation']['#options'][$form_state['values']['relations_fieldset'][$i]['relation']];
	$mappedclass= $form_state['values']['relations_fieldset'][$i]['mapped_class'];
	$mappedprop= $form_state['values']['relations_fieldset'][$i]['mapped_property'];
	$synmap= $form_state['values']['relations_fieldset'][$i]['syntax_mapping'];
 	 
	drupal_set_message($relation);
	db_insert('relations')
    ->fields(array(
    	
      'did1' => $datamodel1,
      'did2' => $datamodel2,
      'coreclass' =>$coreclass,
      'coreprop' =>$coreprop,
      'relation' =>$relation,
      'mappedclass' =>$mappedclass,
      'mappedprop' =>  $mappedprop,
      'synmap' =>$synmap,
      ))->execute();
    
   
 }
    
    if($select1 =="add new") {
    db_insert('datamodels')
    ->fields(array(
    	'name' =>$datamodel1,
    	'uri' =>$form_state['values']['wrapper_datamodels']['datamodel_fieldset1']['URI1'],
    ))->execute();
    }
    
    if($select2 =='add new') {
    	db_insert('datamodels')
    	->fields(array(
    		'name' =>$datamodel2,
    		'uri' =>$form_state['values']['wrapper_datamodels']['datamodel_fieldset2']['URI2'],
    	))->execute();
    }
      
if(easyrdf()){
 		$gs = new EasyRdf_Sparql_Client('http://localhost:8890/sparql');
 		$graph1 = new EasyRdf_Graph('http://cpsv-ap_mapping.eu');
 		//datamodel, classes & properties
 		$graph1->add($select1, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://cpsv-ap-mapping/datamodel');
 		$graph1->add($coreprop, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property');
 		$graph1->add($mappedprop, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property');
 		$graph1->add($coreclass, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		$graph1->add($mappedclass, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 'http://www.w3.org/2000/01/rdf-schema#Class');
 		
 		//ispartof
 		
 		$graph1->add($coreclass, 'http://purl.org/dc/terms/isPartOf', $datamodelURI1);
 		$graph1->add($mappedclass, 'http://purl.org/dc/terms/isPartOf', $datamodelURI2);
 		$graph1->add($coreprop, 'http://purl.org/dc/terms/isPartOf', $coreclass);
 		$graph1->add($mappedprop, 'http://purl.org/dc/terms/isPartOf', $mappedclass);
 		
 		//relations between properties
 		switch($relation){
 		case 'Close match':
 			$graph1->add($coreprop, 'http://www.w3.org/2004/02/skos/core#closeMatch', $mappedprop);
 			break;
 		case 'Exact match':
 			$graph1->add($coreprop, 'http://www.w3.org/2004/02/skos/core#exactMatch', $mappedprop);
 			break;
 		case 'Narrow match':
 			$graph1->add($coreprop, 'http://www.w3.org/2004/02/skos/core#narrowMatch', $mappedprop);
 			break;
 		case 'Broad match':
 			$graph1->add($coreprop, 'http://www.w3.org/2004/02/skos/core#broadMatch', $mappedprop);
 			break;
 		case 'Related match':
 			$graph1->add($coreprop, 'http://www.w3.org/2004/02/skos/core#relatedMatch', $mappedprop);
 			break;
 		default:
 		}
 	$gs->insert($graph1, 'http://cpsv-ap_mapping.eu');
 	
 
$result = $gs->query('select * where {?s ?o ?p}');
    drupal_set_message($numFields);
 	
 	
}
 	drupal_set_message("Form has been submitted...hopefully");	
 	
 	
}

function mapping_basic_populate_list(){
	$databaselist= db_query('SELECT mid,name FROM datamodels') ;

	$options= array('0' => 'add new');
   	 	foreach ($databaselist as $item) {
		  	$key = $item->mid;
		  	$value = $item->name;
		  	$options[$key] = $value;
		  }
    return $options;
}
		  
function mapping_basic_relations_list() {
	$voc_name = 'Skos_mappingRelation';
	$myvoc = taxonomy_vocabulary_machine_name_load($voc_name);
		  
	$dropdown_source = taxonomy_get_tree($myvoc->vid);
	
	$dropdown_list = array('0' => '---none---');
		  
		  foreach ($dropdown_source as $item) {
		  	  $key = $item->tid;
		  	  $value = $item->name;
		  	  $dropdown_list[$key] = $value;
		  }
		  
	return $dropdown_list;
}





	